//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Movement/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""abdeb0df-10f6-416e-b782-341c2518990c"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""301b8a86-8d4e-4a8f-b3e9-7abca2d11956"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""49b6feba-ef2b-4237-b1c4-f3e3d83b173a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""13a0b1f9-66a9-4f90-86eb-d85bd6ea210e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchCamera"",
                    ""type"": ""Button"",
                    ""id"": ""37208393-dd74-46c9-af3f-f90570702e10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLock"",
                    ""type"": ""Button"",
                    ""id"": ""1a626a6f-9a0f-4adb-817b-094dc591098a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fietsbel"",
                    ""type"": ""Button"",
                    ""id"": ""df87ed4d-7d66-40a4-937a-53eac6c989c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipSplash"",
                    ""type"": ""Button"",
                    ""id"": ""eb5cd9da-13e6-49f3-a025-b00452e1a74e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextConvo"",
                    ""type"": ""Button"",
                    ""id"": ""79f6ddc1-8923-4a20-b50b-ee70e0d263a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f821be48-a97f-4121-aa8f-7cce0013f5c3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca212e41-1bee-4309-83e5-f298ebf4751c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ef403de-66ab-4e59-a2f5-f6bd1ca913e4"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""532c4db2-7814-43c7-9fbd-05bdadb5704f"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05e3ac83-8a0e-4dce-8a3e-8bd7216c50c2"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c715577a-3c2f-4779-af26-4e51990a9e0a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fietsbel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ad13e3f-b218-4b87-9edd-8be2f31e8ca4"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipSplash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e4c8c6e-1fbe-4b64-9333-6c8d268d4484"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextConvo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Forward = m_Default.FindAction("Forward", throwIfNotFound: true);
        m_Default_Backward = m_Default.FindAction("Backward", throwIfNotFound: true);
        m_Default_Rotation = m_Default.FindAction("Rotation", throwIfNotFound: true);
        m_Default_SwitchCamera = m_Default.FindAction("SwitchCamera", throwIfNotFound: true);
        m_Default_MouseLock = m_Default.FindAction("MouseLock", throwIfNotFound: true);
        m_Default_Fietsbel = m_Default.FindAction("Fietsbel", throwIfNotFound: true);
        m_Default_SkipSplash = m_Default.FindAction("SkipSplash", throwIfNotFound: true);
        m_Default_NextConvo = m_Default.FindAction("NextConvo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
    private readonly InputAction m_Default_Forward;
    private readonly InputAction m_Default_Backward;
    private readonly InputAction m_Default_Rotation;
    private readonly InputAction m_Default_SwitchCamera;
    private readonly InputAction m_Default_MouseLock;
    private readonly InputAction m_Default_Fietsbel;
    private readonly InputAction m_Default_SkipSplash;
    private readonly InputAction m_Default_NextConvo;
    public struct DefaultActions
    {
        private @PlayerInput m_Wrapper;
        public DefaultActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Default_Forward;
        public InputAction @Backward => m_Wrapper.m_Default_Backward;
        public InputAction @Rotation => m_Wrapper.m_Default_Rotation;
        public InputAction @SwitchCamera => m_Wrapper.m_Default_SwitchCamera;
        public InputAction @MouseLock => m_Wrapper.m_Default_MouseLock;
        public InputAction @Fietsbel => m_Wrapper.m_Default_Fietsbel;
        public InputAction @SkipSplash => m_Wrapper.m_Default_SkipSplash;
        public InputAction @NextConvo => m_Wrapper.m_Default_NextConvo;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
            @Backward.started += instance.OnBackward;
            @Backward.performed += instance.OnBackward;
            @Backward.canceled += instance.OnBackward;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @SwitchCamera.started += instance.OnSwitchCamera;
            @SwitchCamera.performed += instance.OnSwitchCamera;
            @SwitchCamera.canceled += instance.OnSwitchCamera;
            @MouseLock.started += instance.OnMouseLock;
            @MouseLock.performed += instance.OnMouseLock;
            @MouseLock.canceled += instance.OnMouseLock;
            @Fietsbel.started += instance.OnFietsbel;
            @Fietsbel.performed += instance.OnFietsbel;
            @Fietsbel.canceled += instance.OnFietsbel;
            @SkipSplash.started += instance.OnSkipSplash;
            @SkipSplash.performed += instance.OnSkipSplash;
            @SkipSplash.canceled += instance.OnSkipSplash;
            @NextConvo.started += instance.OnNextConvo;
            @NextConvo.performed += instance.OnNextConvo;
            @NextConvo.canceled += instance.OnNextConvo;
        }

        private void UnregisterCallbacks(IDefaultActions instance)
        {
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
            @Backward.started -= instance.OnBackward;
            @Backward.performed -= instance.OnBackward;
            @Backward.canceled -= instance.OnBackward;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @SwitchCamera.started -= instance.OnSwitchCamera;
            @SwitchCamera.performed -= instance.OnSwitchCamera;
            @SwitchCamera.canceled -= instance.OnSwitchCamera;
            @MouseLock.started -= instance.OnMouseLock;
            @MouseLock.performed -= instance.OnMouseLock;
            @MouseLock.canceled -= instance.OnMouseLock;
            @Fietsbel.started -= instance.OnFietsbel;
            @Fietsbel.performed -= instance.OnFietsbel;
            @Fietsbel.canceled -= instance.OnFietsbel;
            @SkipSplash.started -= instance.OnSkipSplash;
            @SkipSplash.performed -= instance.OnSkipSplash;
            @SkipSplash.canceled -= instance.OnSkipSplash;
            @NextConvo.started -= instance.OnNextConvo;
            @NextConvo.performed -= instance.OnNextConvo;
            @NextConvo.canceled -= instance.OnNextConvo;
        }

        public void RemoveCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnSwitchCamera(InputAction.CallbackContext context);
        void OnMouseLock(InputAction.CallbackContext context);
        void OnFietsbel(InputAction.CallbackContext context);
        void OnSkipSplash(InputAction.CallbackContext context);
        void OnNextConvo(InputAction.CallbackContext context);
    }
}
